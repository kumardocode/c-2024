Q1 ) 
void main(){
//int x = 5;
//int y;

int x = 5, y;
y = x++;
printf("%d%d",x,y); // 6 , 5 
}
----------------------------------------------

To define a variable in any language their are certain rules :- 
1. we cant start with digit(numeric) - Ex:- 123a = 55;----->wrong
2, while defining a variable we can only use $,_ ; Ex: int fruits_factory$location = 'Ranchi'
3.we can use numeric but at the end or in the middle Ex: int frits46xyz = 'delhi'

Note : preincrement , predecrement operators are having more precedence than = operator
Note : postincrement , and postdecrement operators have less presedence than = operator


---------------------------------------------------
Arithmetic operators :- 
int/real( glass water) -> float(i bucket water) - > double(100 litre tank) 
Example : 
integer range - > 65535 
1) 3 + 4 -- > 7
2) 3 - 4 --> -1
3) 3 * 4 = 12 
4) 3 / 4 = 0 ( Data narrowing ) / Data loss / Internal typecasting 
5) 3.0 / 4 = 0.75 ( Data widning )/ Internal typecasting 
6) 3.0 / 4.0 = 0.75 
7) 36 % 6 = 0
8) 2.5 % 3 = H/W 

-----------------------------------------------------------------
Bitwise operator 
1. difference between and  and or ?

Ex : Bring me a pen and a glass of water .   True    True 
Ex : Bring me a pen or a glass of water.     True  		False ,   False  True 
& operator 
0(False) & 0 (False) -> 0 (False)
0(False) & 1(True) -> 0 (False)
1(True) & 0 (False) -> 0 (False)
1(True) & 1(True) -> 1 (True)

---------------------------------------------------------------------
XOR operator 

0 ^ 1 = 0 
0 ^ 0 = 1
1 ^ 0 = 0
1 ^ 1 = 0 
-----------------------------------------------------------------------
OR operator 

0 | 1 = 1 
0 | 0 = 0
1 | 0 = 1
1 | 1 = 1 
-----------------------------------------------------------------------
! (Excalmatory mark) but in technical not 
	True - > false 
	False -> true 
Ex - > !0 --> 1

--------------------------------------------------------------------------
Logical operator 
1. ! NOT
2. && 
3. || (OR) 

&& operator 
0(False) && 0 (False) -> 0 (False)
0(False) && 1(True)  -> 0 (False)
1(True) && 0 (False) -> 0 (False)
1(True) && 1(True)  -> 1 (True)


|| operator 
0(False) || 0 (False)  -> 0 (False)
0(False) || 1(True)   -> 1 (True)
1(True) || 0 (False)  -> 1 (True)
1(True) || 1(True)   -> 1 (True)

Ex:  
1. int x = 5 > 4 --> True (1)
2. int y = !(5 > 4) --> False
3. x > 2 = False(0)
4. x > 2 && x < 5 =  False(0) && True(1) --> False (0) 



 


